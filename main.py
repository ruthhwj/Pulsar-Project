# -*- coding: utf-8 -*-
"""
Created on Tue Feb 18 09:57:02 2020

@author: ruthw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import subprocess
from astropy.io import ascii
import glob, os
import sklearn 
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import minmax_scale
"""
def generate_pulsars(i, arg1, *argv): 
#pulsar arguments list: fakepulsar -cone "1-9" -ellipse "10-12" -cone'13-21' -ellipse '22-24' -a '25' -b '26' -gg'27'
pulsar_arg=["./pulsar-getter.sh", "1", "10.5", "1","15","750","12","-1","300","0","0.85","45","1","0.5","7.7","1","15","750","12","-1","300","0","0.8","45","1","20","-2.4", "w6test3model.gg"]
#[script name, I1, rho1, w1, n1, p4_1, phi0_1, fP4_1, t4_1, phi4_1 e1, or1, s2, I2, rho2, w2, n2, p4_2, phi0_2, fP4_2, t4_2, phi4_2 e2, or2, s2, a, b, filename (include .gg)]
test = subprocess.Popen(pulsar_arg)


    for arg in argv:
        int_arg = int(pulsar_arg[i]
    subprocess.check_call(pulsar_arg)
#call bash script looping over pulsars
def read_pulsars():
    global data=[]
    for file in glob.glob("*.ASCII"):
        data.append(file)
#read in pulsars generated by generate_pulsars
#store as an array

def bi_test():
def plot_pulsars():
#loop over array formed by read_pulsars()
#def constrain_parameter(): #will likely extend this to individual functions for each paramter or a class

"""
def read_pulsar(string, flag):#"weak.all37.p3fold.ASCII" "W5testmodel.p3fold.ASCII"
    data = ascii.read(string, data_start=1)
    df = data.to_pandas()
    intensities = np.array(df.col4) #extract intensities column
    df_pixelarray = pd.DataFrame(np.array(intensities).reshape(50,2246))#shape into array with dimensions of image
    if flag == 0:
        return df_pixelarray # want this for plotting
    if flag != 0:
        return intensities # want this for analysis


def plot_pulsar(df_pixelarray):
    plt.imshow(df_pixelarray, 'twilight', origin='lower', interpolation='none', aspect='auto')
    
def fit_measure(intensities_ref, intensities_img):
    ref = minmax_scale(intensities_ref)
    img = minmax_scale(intensities_img)
    
    DoF, chi = (len(ref) -1), 0
    
    for i in range(len(ref)):
        x1 = (img[i]-ref[i])
        if img[i] != 0:
            chi += x1*x1/img[i]
            
    print(chi)        
    return chi


    """ 
    #produce chi squared for all pixel intensities = 1
    
    chi_0 = 0
    ones = np.ones(len(ref))
    
    for i in range(len(ref)):
        x1 = (ones[i]-ref[i])
        if img[i] != 0:
        chi_0 += x1*x1/img[i]
    """
 



### Main code starts here ###

intensities_exp = read_pulsar("weak.all37.p3fold.ASCII",1)
intensities_model = read_pulsar("W5testmodel.p3fold.ASCII",1)

fit_measure(intensities_exp, intensities_model)

intensities_array_exp = read_pulsar("weak.all37.p3fold.ASCII",0)
intensities_array_model = read_pulsar("W5testmodel.p3fold.ASCII",0)

#plot_pulsar(intensities_array_exp)
plot_pulsar(intensities_array_model)





