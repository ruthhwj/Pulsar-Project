#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <math.h>
#include "psrsalsa.h"

int NrSubints = -1;      // Effectively the number of P3 bins
int NrBins;              // These are the number of longitude bins to process
double true_P3 = -1;     // Apparent P3 as observed, in units of pulse periods
double P3;               // This is the number of P3 bins in the P3 fold, value will be the same as NrSubints
double P4;               // Circulation time, in pulse periods, if the observed P3 would be the number of P3 bins in the P3 fold
double alpha;            // Magnetic inclination, in radians
double sin_alpha, cos_alpha;
double beta;             // Impact parameter of LOS, in radians
int fiducial_bin;        // Bin number of the fiducial plane, such that if this is 0, the fiducial plane happens directly after the end of the first bin.
int N_sparks;            // Number of sparks
int alias_order;         // That is the n as the Gupta et al. stuff, i.e. increases by 1 everytime the apparent drift direction reverses.
double sigma1, sigma2;   // Off pulse variance (so really sigma squared) of the two polarizations
int long_bin_start = -1; // An onpulse region which lives within the NrBins longitude bins (start bin)
int long_bin_end = -1;   // An onpulse region which lives within the NrBins longitude bins (end bin)


//double **data;           // The data to be fitted. There are NrBins arrays with length 4*NrSubints, which is the first polarization (O1 leading) at a given pulse longitude, followed by those corresponding to O1 trailing, O2 leading, O2 trailing.
float *data_O1l, *data_O2l, *data_O1t, *data_O2t;  // Data to be fitted. Their length is NrSubints.
long long_bin_nr;        // Current longitude bin which is being fitted for, as required by chi2_funk()
int pol_eq_nr;           // Current polarization equation number (0, 1) which is being fitted for, as required by chi2_funk()

double chi2_funk(double *x)
{
  double chi2;
  double denomenator;
  chi2 = 0;

  if(pol_eq_nr == 0) {
    denomenator = sigma1*(1+x[0]*x[0]) + x[1]*x[1]*sigma2;
  }else {
    denomenator = x[0]*x[0]*sigma1 + sigma2*(1+x[1]*x[1]);
  }


  int i;
  for(i = 0; i < NrSubints; i++) {
    double term;
    //    float Ol1, Ol2, Ot1, Ot2;
    /*
    Ol1 = (data[long_bin_nr])[i+0*NrSubints];
    Ol2 = (data[long_bin_nr])[i+2*NrSubints];
    Ot1 = (data[long_bin_nr])[i+1*NrSubints];
    Ot2 = (data[long_bin_nr])[i+3*NrSubints];
    */
    /*
    Ol1 = data_O1l[i];
    Ol2 = data_O2l[i];
    Ot1 = data_O1t[i];
    Ot2 = data_O2t[i];
    if(pol_eq_nr == 0) {
      term = Ol1-x[0]*Ot1-x[1]*Ot2;
    }else {
      term = Ol2-x[0]*Ot1-x[1]*Ot2;
    }
    */
    if(pol_eq_nr == 0) {
      term = data_O1l[i]-x[0]*data_O1t[i]-x[1]*data_O2t[i];
    }else {
      term = data_O2l[i]-x[0]*data_O1t[i]-x[1]*data_O2t[i];
    }
    //    chi2 += term*term/denomenator;
    chi2 += term*term;
  }

  return chi2/denomenator;
}


double calculate_theta_trans(double phi)
{
  // phi is defined with respect to the fiducial plane,
  // i.e. -pi < phi <= pi, where the phi_fid = 0
  //  R = calculate_R(phi);
  double R, sttrans, cttrans;
  double sin_ab = sin(alpha + beta);
  double cos_ab = cos(alpha + beta);
  R = acos( (cos_alpha*cos_ab) + (sin_alpha*sin_ab*cos(phi)));
  double sin_R = sin(R);
  sttrans = (sin_ab*sin(phi)) / sin_R;
  cttrans = ((cos_alpha*cos(R))-cos_ab)/(sin_alpha*sin_R);
  return atan2(sttrans, cttrans);
}


double floating_mod(double a, double b)
{
  // returns the remainder of a - n*b, where n is an integer.
  // Maps a to the range 0 - b.
  if(b < 0.0) {
    fprintf(stderr, "ERROR (floating_mod): the second value must be greater than 0.");
    exit(0);
  }
  /* 
     If a is positive something like this should work
     long n = a/b;
     a -= n*b;
     return a;

     Need to possibly do a +1 or -1 if a is negative

     Following is something I use to get a value between 0 and 360 deg
  int i;
  i = fabs(a)/360.0;
  if(a > 0)
    a -= 360*i;
  else
    a += 360*i;
  if(a < 0)
    a += 360;
  return a;


   */
  while(a >= b) {
    a -= b;
  }
  while(a < 0.0) {
    a += b;
  }
  return a;
}

void find_opposite_subint(int sub_nr, int bin_nr, double sign_modifier, int *sub1, double *weight1, int *sub2, double *weight2, double *true_opposite)
{
  // k_2 = \bigg( k_1 + \frac{P_3}{2\pi}\Delta\Phi\bigg)\mod P_3
  // \Delta\Phi = -N\bigg( \frac{\Delta\phi}{P_4}\mp\Delta\theta_\mathrm{trans}\bigg)
 
  // Calculate the pulse longitude wrt the fiducial plane
  // (\phi - \phi_\mathrm{fid})
  double phi;
  phi = (((double)bin_nr) + 0.5)*2.0*M_PI/((double)NrBins)-M_PI;

  //Remember that ttrans is symmetric, (ttrans2 = -ttrans1)
  // so Delta ttrans = -ttrans1 - ttrans 1 = -2ttrans
  double ttrans;
  ttrans = calculate_theta_trans(phi);

  double Dphi, Dttrans, DPhase;
  Dphi = -2.0*phi;
  Dttrans = -2.0*ttrans;
  double D;
  if(alias_order % 2 == 0) {
    D = 1.0;
  }else {
    D = -1.0;
  }
  DPhase = -((double)N_sparks)*((Dphi/P4) + sign_modifier*Dttrans)*D;

  // find the opposite number.
  // Remember, this is the true opposite number + 0.5 because of the way bins work.
  double opposite_sub_nr;
  opposite_sub_nr = floating_mod(((double)sub_nr + DPhase*P3/(2.0*M_PI)), P3);
  *true_opposite = opposite_sub_nr - 0.5;
  // Return 2 subints with their associated weights, and the true opposite sub for a sanity check.

  double below;
  below = floor(opposite_sub_nr);

  *weight1 = 1.0 - (opposite_sub_nr - below);
  *weight2 = (opposite_sub_nr - below);
    // But actually the centres of the bins are non-integer...
  *sub1 = (int)(floating_mod(floor(*true_opposite),NrSubints));
  *sub2 = (int)(floating_mod(ceil(*true_opposite), NrSubints));
}

void find_initial_guess(double *guess_a, double *guess_b, double *guess_c, double *guess_d)
{
  int n;
  double Sxx, Sxy1, Sxy2, Szz, Szy1, Szy2, Sxz;
  Sxx = Sxy1 = Sxy2 = Szz = Szy1 = Szy2 = Sxz = 0;
  for(n = 0; n < NrSubints; n++) {
    double O1t = data_O1t[n];
    double O1l = data_O1l[n];
    double O2t = data_O2t[n];
    double O2l = data_O2l[n];
    //    printf("find_initial_guess: %e\t%e\t%e\t%e\n", O1l, O1t, O2l, O2t);
    Sxx  += O1t*O1t;
    Sxy1 += O1t*O1l;
    Sxy2 += O1t*O2l;
    Szz  += O2t*O2t;
    Szy1 += O2t*O1l; 
    Szy2 += O2t*O2l;
    Sxz  += O1t*O2t;
  }
  double det;
  det = Sxx*Szz-Sxz*Sxz;
  *guess_a = (Sxy1*Szz-Sxz*Szy1)/det;
  *guess_b = (Sxx*Szy1-Sxz*Sxy1)/det;
  *guess_c = (Sxy2*Szz-Sxz*Szy2)/det;
  *guess_d = (Sxx*Szy2-Sxz*Sxy2)/det;
}

int is_physical(double a, double b, double c, double d)
{
  int PHYSICAL = 1;
  if(!(((a < 0.0) && (b < 0.0)) || ((c < 0.0) && (d < 0.0)))) {
    if((a*fabs(c)) == (c*fabs(a))) {
      PHYSICAL = 1.0;
    }else if((fabs(a)*d)+(b*fabs(c)) >= 0) {
      PHYSICAL = 1.0;
    }else {
      PHYSICAL = 0.0;
    }
  }else {
    PHYSICAL = 0.0;
  }
  return PHYSICAL;
}

int main(int argc, char **argv)
{
  long i;
  int profiledump;
  psrsalsaApplication application;

  //  sigma1 = sigma2 = -1;

  initApplication(&application, "fit_asym", "[options] inputfile1 inputfile2");
  application.switch_verbose = 1;
  application.switch_debug = 1;
  profiledump = 0;

  if(argc < 2) {
    printf("Program to fit the Asymmetry matrix, to do Crispin's 0031 stuff. The first input file is the data (P3-fold with three polarization channels, which are Stokes I and the two mode separated polarizations). The second input file defines the gridsearch parameters.\n");
    printApplicationHelp(&application);
    printf("Input options:\n\n");
    //    printf("-sigma   \"sigma1 sigma2\"    Define the two RMSes of the two polarizations.\n");
    //    printf("-np3bins n                    Set the expected the number of P3 bins to be n.\n");
    printf("-P3 value                 The apparent P3 as observed, in units of pulse periods.\n");
    printf("-onpulse \"bin1 bin2\"  The range of bins considered as onpulse (used to calculate the off-pulse rms).\n");
    printf("-profiledump              Produce dump files corresponding to the pulse profile for each itteration.\n")

    printCitationInfo();
    terminateApplication(&application);
    return 0;
  }else {

    for(i = 1; i < argc; i++) {
      int index;
      index = i;
      if(processCommandLine(&application, argc, argv, &index)) {
	      i = index;
      }else if(strcmp(argv[i], "-P3") == 0) {
	if(parse_command_string(application.verbose_state, argc, argv, i+1, 0, -1, "%lf", &true_P3, NULL) == 0) {
	  printerror(application.verbose_state.debug, "ERROR fit_asym: Cannot parse '%s' option.", argv[i]);
	  return 0;
	}
	i++;
      }else if(strcmp(argv[i], "-onpulse") == 0) {
	if(parse_command_string(application.verbose_state, argc, argv, i+1, 0, -1, "%d %d", &long_bin_start, &long_bin_end, NULL) == 0) {
	  printerror(application.verbose_state.debug, "ERROR fit_asym: Cannot parse '%s' option.", argv[i]);
	  return 0;
	}
	i++;
	/*
      }else if(strcmp(argv[i], "-sigma") == 0) {
	if(parse_command_string(application.verbose_state, argc, argv, i+1, 0, -1, "%lf %lf", &sigma1, &sigma2, NULL) == 0) {
	  printerror(application.verbose_state.debug, "ERROR fit_asym: Cannot parse '%s' option.", argv[i]);
	  return 0;
	}
	i++;
	}else if(strcmp(argv[i], "-np3bins") == 0) {
	if(parse_command_string(application.verbose_state, argc, argv, i+1, 0, -1, "%ld", &NrSubints, NULL) == 0) {
	  printerror(application.verbose_state.debug, "ERROR fit_asym: Cannot parse '%s' option.", argv[i]);
	  return 0;
	}
	i++;
	*/
      }else {
	if(argv[i][0] == '-') {
	  printerror(application.verbose_state.debug, "ERROR fit_asym: Unknown option: %s\n\nRun fit_asym without command line arguments to show help", argv[i]);
	  return 0;
	}else {
	  if(applicationAddFilename(i, application.verbose_state) == 0)
	    return 0;
	}
      }
    }
  }

  if(true_P3 <= 0) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Please use the -P3 option to provide a positive number.");
    return 0;
  }
  if(long_bin_start < 0 || long_bin_start < 0) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Please use the -onpulse option to provide a positive number.");
    return 0;
  }



  /*
  if(sigma1 <= 0 || sigma2 <= 0) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Please use the -sigma option to provide two positive numbers.");
    return 0;
  }
  if(NrSubints <= 0) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Please use the -np3bins option to provide a positive number.");
    return 0;
  }
  */
  if(applicationFilenameList_checkConsecutive(argv, application.verbose_state) == 0) {
    return 0;
  }
  if(numberInApplicationFilenameList(&application, argv, application.verbose_state) != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Two input files were expected at the end of the command line.");
    return 0;
  }


  char *filename_ptr;
  filename_ptr = getNextFilenameFromList(&application, argv, application.verbose_state);
  if(application.verbose_state.verbose) {
    fprintf(stdout, "Loading pulsar data from file %s\n", filename_ptr);
  }
  datafile_definition datain;
  // Open a file in a non-specified format (will be hopefully figured out automatically), writing is not enabled, and the file is read into memory.
  if(openPSRData(&datain, filename_ptr, 0, 0, 1, 0, application.verbose_state) == 0) {
    printerror(application.verbose_state.debug, "ERROR: Error opening data");
    return 0;
  }
  NrSubints = datain.NrSubints;      // Effectively the number of P3 bins
  NrBins = datain.NrBins;            // These are the number of longitude bins to process
  if(datain.NrPols != 3) {
    printerror(application.verbose_state.debug, "ERROR: Expected that the data file contains 3 polarizations.");
    return 0;
  }
  if(datain.NrBins % 2 == 1) {
    printerror(application.verbose_state.debug, "ERROR: Expected that the data file contains an even number of pulse longitude bins.");
    return 0;
  }

  filename_ptr = getNextFilenameFromList(&application, argv, application.verbose_state);
  if(application.verbose_state.verbose) {
    fprintf(stdout, "Loading grid search information from %s\n", filename_ptr);
  }
  FILE *fin;
  fin = fopen(filename_ptr, "r");
  if(fin == NULL) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: cannot open file %s.\n", filename_ptr);
    return 0;
  }
  char txt[1000];
  int ret, linenr;
  double alpha_start, alpha_end;    // Start/end alpha in degrees
  int alpha_steps;                 // Nr of steps in alpha gridsearch
  double drift_grad_start, drift_grad_end;   // Gradient of the drift bands in P3 bins per degree????
  int drift_grad_steps;
  int nrsparks_start, nrsparks_end, nrsparks_steps;
  int fid_bin_start, fid_bin_end, fid_bin_steps;
  int aliasorder_start, aliasorder_end, aliasorder_steps;


  linenr = 1;
  ret = fscanf(fin, "%lf %s", &alpha_start, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%lf %s", &alpha_end, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &alpha_steps, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%lf %s", &drift_grad_start, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%lf %s", &drift_grad_end, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &drift_grad_steps, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &nrsparks_start, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &nrsparks_end, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &nrsparks_steps, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  if((nrsparks_end-nrsparks_start+1)%nrsparks_steps != 0) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: The grid search over the number of sparks (start=%d, end=%d and steps=%d) are not compatible since the number of sparks should be an integer.\n", nrsparks_start, nrsparks_end, nrsparks_steps);
    return 0;        
  }


  ret = fscanf(fin, "%d %s", &fid_bin_start, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &fid_bin_end, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &fid_bin_steps, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &aliasorder_start, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &aliasorder_end, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  ret = fscanf(fin, "%d %s", &aliasorder_steps, txt);
  if(ret != 2) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: Reading line %d failed in %s.\n", linenr, filename_ptr);
    return 0;    
  }
  linenr++;

  if((aliasorder_end-aliasorder_start+1)%aliasorder_steps != 0) {
    printerror(application.verbose_state.debug, "ERROR fit_asym: The grid search over the alias order (start=%d, end=%d and steps=%d) are not compatible since the alias order should be an integer.\n", aliasorder_start, aliasorder_end, aliasorder_steps);
    return 0;        
  }

  fclose(fin);
  if(application.verbose_state.verbose) {
    printf("alpha (deg): %lf %lf in %d steps\n", alpha_start, alpha_end, alpha_steps);
    printf("drift gradient (?): %lf %lf in %d steps\n", drift_grad_start, drift_grad_end, drift_grad_steps);
    printf("Nr sparks: %d %d in %d steps\n", nrsparks_start, nrsparks_end, nrsparks_steps);
    printf("Fiducial bin: %d %d in %d steps\n", fid_bin_start, fid_bin_end, fid_bin_steps);
    printf("Alias order:  %d %d in %d steps\n", aliasorder_start, aliasorder_end, aliasorder_steps);
  }
  P3 = (double)NrSubints;

  long p3bin, polnr, longbin;
  for(polnr = 1; polnr <= 2; polnr++) {
    double rms;
    long nrpoints_used;
    rms = 0;
    nrpoints_used = 0;
    for(p3bin = 0; p3bin < NrSubints; p3bin++) {
      for(longbin = 0; longbin < NrBins; longbin++) {
	if(longbin < long_bin_start || longbin > long_bin_end) {
	  nrpoints_used++;
	  float sample;
	  //	  fprintf(stderr, "%ld %ld %ld\n", p3bin, longbin, polnr);
	  if(readPulsePSRData(&datain, p3bin, polnr, 0, longbin, 1, &sample, application.verbose_state) != 1) {
	    printerror(application.verbose_state.debug, "ERROR: read error");
	    return 0;
	  }
	  rms += sample*sample;
	}
      }
    }
    if(polnr == 1) {
      sigma1 = rms/(double)nrpoints_used;
    }else {
      sigma2 = rms/(double)nrpoints_used;
    }
  }
  if(application.verbose_state.verbose) {
    printf("Found offpulse RMS for the two polariations: sigma1=%e sigma2=%e\n", sqrt(sigma1), sqrt(sigma2));
  }  

  alpha_start *= M_PI/180.0;
  alpha_end *= M_PI/180.0;

  double alpha_stepsize, drift_grad_stepsize, drift_grad;
  int nrsparks_stepsize, fid_bin_stepsize, aliasorder_stepsize;

  if(alpha_steps >= 2) {
    alpha_stepsize = (alpha_end-alpha_start)/(double)(alpha_steps-1);
  }else {
    alpha_stepsize = 1;
    alpha_end = alpha_start;
  }

  if(drift_grad_steps >= 2) {
    drift_grad_stepsize = (drift_grad_end-drift_grad_start)/(double)(drift_grad_steps-1);
  }else {
    drift_grad_stepsize = 1;
    drift_grad_end = drift_grad_start;
  }

  if(nrsparks_steps >= 2) {
    nrsparks_stepsize = (nrsparks_end-nrsparks_start)/(nrsparks_steps-1);
  }else {
    nrsparks_stepsize = 1;
    nrsparks_end = nrsparks_start;
  }

  if(fid_bin_steps >= 2) {
    fid_bin_stepsize = (fid_bin_end-fid_bin_start)/(fid_bin_steps-1);
  }else {
    fid_bin_stepsize = 1;
    fid_bin_end = fid_bin_start;
  }

  if(aliasorder_steps >= 2) {
    aliasorder_stepsize = (aliasorder_end-aliasorder_start)/(aliasorder_steps-1);
  }else {
    aliasorder_stepsize = 1;
    aliasorder_end = aliasorder_start;
  }

  datafile_definition *rotated_data;
  rotated_data = malloc(fid_bin_steps*sizeof(datafile_definition));
  if(rotated_data == NULL) {
    printerror(application.verbose_state.debug, "ERROR fit_asym_gridsearch: Memory allocation error.\n");
    return 0;
  }

  printf("Setting up some stuff before fitting starts\n");

  int fiducial_bin_index = 0;
  // Make different copies of the data, which has the fiducial plane in the centre
  for(fiducial_bin = fid_bin_start; fiducial_bin <= fid_bin_end; fiducial_bin += fid_bin_stepsize) {
    
    // Clone the original data
    if(make_clone(datain, &(rotated_data[fiducial_bin_index]), application.verbose_state) == 0) {
      printerror(application.verbose_state.debug, "ERROR fit_asym_gridsearch: Cloning data failed.\n");
      return 0;
    }

    float shiftPhase = (NrBins/2.0 - 1.0 - fiducial_bin)/(float)NrBins;
    if(preprocess_fftshift(rotated_data[fiducial_bin_index++], shiftPhase, 0, 0.0, application.verbose_state) != 1) {
      printerror(application.verbose_state.debug, "ERROR fit_asym_gridsearch: Rotating data failed.\n");
      return 0;
    }
    //    printf("index = %d - Apply shift = %e bins\n", fiducial_bin_index, shiftPhase);

  }

  // Close the input file
  closePSRData(&datain, 0, application.verbose_state);

  FILE *file_grid, *file_matrix, *file_physical, *file_chisq;
  file_grid = fopen("gridsearch.DUMP", "w");
  file_matrix = fopen("matrix.DUMP", "w");
  file_physical = fopen("physical.DUMP", "w");
  file_chisq = fopen("chisq.DUMP", "w");
  if(file_grid == NULL || file_matrix == NULL || file_physical == NULL || file_chisq == NULL) {
    printerror(application.verbose_state.debug, "ERROR fit_asym_gridsearch: Cannot open output ascii file.\n");
    perror("");
    return 0;
  }
  fprintf(file_grid, "%f %f %d %f %f %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", alpha_start*180.0/M_PI, alpha_end*180.0/M_PI, alpha_steps, drift_grad_start, drift_grad_end, drift_grad_steps, nrsparks_start, nrsparks_end, nrsparks_steps, fid_bin_start, fid_bin_end, fid_bin_steps, aliasorder_start, aliasorder_end, aliasorder_steps, long_bin_start, long_bin_end, NrSubints, NrBins);
  fprintf(file_matrix, "%f %f %d %f %f %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", alpha_start*180.0/M_PI, alpha_end*180.0/M_PI, alpha_steps, drift_grad_start, drift_grad_end, drift_grad_steps, nrsparks_start, nrsparks_end, nrsparks_steps, fid_bin_start, fid_bin_end, fid_bin_steps, aliasorder_start, aliasorder_end, aliasorder_steps, long_bin_start, long_bin_end, NrSubints, NrBins);
  fprintf(file_physical, "%f %f %d %f %f %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", alpha_start*180.0/M_PI, alpha_end*180.0/M_PI, alpha_steps, drift_grad_start, drift_grad_end, drift_grad_steps, nrsparks_start, nrsparks_end, nrsparks_steps, fid_bin_start, fid_bin_end, fid_bin_steps, aliasorder_start, aliasorder_end, aliasorder_steps, long_bin_start, long_bin_end, NrSubints, NrBins);
  fprintf(file_chisq, "%f %f %d %f %f %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", alpha_start*180.0/M_PI, alpha_end*180.0/M_PI, alpha_steps, drift_grad_start, drift_grad_end, drift_grad_steps, nrsparks_start, nrsparks_end, nrsparks_steps, fid_bin_start, fid_bin_end, fid_bin_steps, aliasorder_start, aliasorder_end, aliasorder_steps, long_bin_start, long_bin_end, NrSubints, NrBins);

  float *data_O1t_notrotated, *data_O2t_notrotated;
  double *solution_a, *solution_b, *solution_c, *solution_d, *chi2_1, *chi2_2;
  int *physical, *fit_status;
  data_O1l = malloc(NrSubints*sizeof(float));
  data_O2l = malloc(NrSubints*sizeof(float));
  data_O1t = malloc(NrSubints*sizeof(float));
  data_O2t = malloc(NrSubints*sizeof(float));
  solution_a = malloc(NrBins*sizeof(double));
  solution_b = malloc(NrBins*sizeof(double));
  solution_c = malloc(NrBins*sizeof(double));
  solution_d = malloc(NrBins*sizeof(double));
  chi2_1 = malloc(NrBins*sizeof(double));
  chi2_2 = malloc(NrBins*sizeof(double));
  physical = malloc(NrBins*sizeof(int));
  fit_status = malloc(NrBins*sizeof(int));
  data_O1t_notrotated = malloc(NrSubints*sizeof(float));
  data_O2t_notrotated = malloc(NrSubints*sizeof(float));
  if(data_O1l == NULL || data_O2l == NULL  || data_O1t == NULL || data_O2t == NULL || data_O1t_notrotated == NULL || data_O2t_notrotated == NULL || solution_a == NULL || solution_b == NULL || solution_c == NULL || solution_c == NULL || chi2_1 == NULL || chi2_1 == NULL || physical == NULL || fit_status == NULL) {
    printerror(application.verbose_state.debug, "ERROR fit_asym_gridsearch: Memory allocation error.\n");
    return 0;
  }
  for(i = NrBins/2; i < NrBins; i++) {
    solution_a[i] = 1;
    solution_b[i] = 0;
    solution_c[i] = 0;
    solution_d[i] = 1;
    chi2_1[i] = 0;
    chi2_2[i] = 0;
    physical[i] = 1;
    fit_status[i] = 0;
  }

  printf("Start fitting process\n");
  fflush(stdout);

  long current_itteration = 0;
  double alpha_iterator = 0.0;

  for(alpha_iterator = alpha_start; alpha_iterator <= alpha_end; alpha_iterator += alpha_stepsize) {
    // sanity check: alpha can never be zero (for the maths to work), so if it is
    // found to be 0, set it to something small but non-zero.
    alpha = alpha_iterator;
    if (alpha <= 0.0){
      alpha = 1.0E-5;
    }

    double sign_modifier;
    //    sign_modifier = -abs(np.cos(alpha))/np.cos(alpha)
    if(alpha < 0.5*M_PI) {
      sign_modifier = -1.0;
    }else {
      sign_modifier = 1.0;
    }

    sin_alpha = sin(alpha);
    cos_alpha = cos(alpha);

    for(drift_grad = drift_grad_start; drift_grad <= drift_grad_end; drift_grad += drift_grad_stepsize) {
      for(N_sparks = nrsparks_start; N_sparks <= nrsparks_end; N_sparks += nrsparks_stepsize) {
        fiducial_bin_index = 0;
        for(fiducial_bin = fid_bin_start; fiducial_bin <= fid_bin_end; fiducial_bin += fid_bin_stepsize) {
          for(alias_order = aliasorder_start; alias_order <= aliasorder_end; alias_order += aliasorder_stepsize) {

            // Update P4
            double k, D;
            k = floor((alias_order + 1.0)/2.0);
            if(alias_order % 2 == 0) {
              D = 1.0;
            }else {
              D = -1.0;
            }
            P4 = (N_sparks*P3) / (k*P3 + D);

            double true_P4;
            // Update true P4
            true_P4 = (N_sparks*true_P3) / (k*true_P3 + D);

            // Update beta
            double Q;
            Q = sign_modifier*((1.0/true_P4)+(2.0*M_PI*drift_grad*D)/(N_sparks*true_P3));
            //	    printf("Q = %e\nsign=%e\ntrue_P3=%e\n", Q, sign_modifier, true_P4);
            beta = atan(sin_alpha/(Q-cos_alpha));

            int shift_value = NrBins/2.0 - 1.0 - fiducial_bin;
            int onpulse_bin_start_shifted = long_bin_start + shift_value;
            int onpulse_bin_end_shifted = long_bin_end + shift_value;

            int bin_nr;
            for(bin_nr = 0; bin_nr < NrBins/2; bin_nr++) {
              int opposite_bin_nr;
              opposite_bin_nr = NrBins - 1 - bin_nr;  // opposite bin is trivial
              int sub1, sub2;
              double weight1, weight2, true_opposite;
              // Weights and stuff should not be required in the code below, so code could be simplified
              find_opposite_subint(0, bin_nr, sign_modifier, &sub1, &weight1, &sub2, &weight2, &true_opposite);

              //	      printf("find_opposite_subint: %d %e %d %e %d %e %e\n", bin_nr, sign_modifier, sub1, weight1, sub2, weight2, true_opposite);

              long row_nr;
              // Extract the relevant data to use for the pulse longitude bin considered.
              for(row_nr = 0; row_nr < NrSubints; row_nr++) {

                if(readPulsePSRData(&(rotated_data[fiducial_bin_index]), row_nr, 1, 0, bin_nr, 1, &(data_O1l[row_nr]), application.verbose_state) != 1) {
                  printerror(application.verbose_state.debug, "ERROR: read error");
                  return 0;
                }

                if(readPulsePSRData(&(rotated_data[fiducial_bin_index]), row_nr, 2, 0, bin_nr, 1, &(data_O2l[row_nr]), application.verbose_state) != 1) {
                  printerror(application.verbose_state.debug, "ERROR: read error");
                  return 0;
                }
                if(readPulsePSRData(&(rotated_data[fiducial_bin_index]), row_nr, 1, 0, opposite_bin_nr, 1, &(data_O1t_notrotated[row_nr]), application.verbose_state) != 1) {
                  printerror(application.verbose_state.debug, "ERROR: read error");
                  return 0;
                }
                if(readPulsePSRData(&(rotated_data[fiducial_bin_index]), row_nr, 2, 0, opposite_bin_nr, 1, &(data_O2t_notrotated[row_nr]), application.verbose_state) != 1) {
                  printerror(application.verbose_state.debug, "ERROR: read error");
                  return 0;
                }
              //		printf("data_O1l=%e data_O2l=%e data_O1l=%e data_O2l=%e for bin_nr=%d\n", data_O1l[row_nr], data_O2l[row_nr], data_O1t_notrotated[row_nr], data_O2t_notrotated[row_nr], bin_nr);
              }

              // Certainly can speed this up. In any case linear
              // interpolation might be quicker???? Also if it isn't a
              // power of 2 it might fail??? Otherwise it might be
              // slower as well.
              //	      if(rotateSinglepulse(float *data, int npts, float epsilon, verbose_definition verbose) == 0) {
              //		printerror(application.verbose_state.debug, "ERROR: read error");
              //		return 0;
              //	      }

              // Populate the trailing side array with a rotated version using linear interpolation
              for(row_nr = 0; row_nr < NrSubints; row_nr++) {
                int row_nr_new1 = sub1 + row_nr;
                int row_nr_new2 = sub2 + row_nr;
                if(row_nr_new1 >= NrSubints) {
                  row_nr_new1 -= NrSubints;
                }
                if(row_nr_new2 >= NrSubints) {
                  row_nr_new2 -= NrSubints;
                }
                //		int offending_line;
                data_O1t[row_nr] = (data_O1t_notrotated[row_nr_new1]*weight1 + data_O1t_notrotated[row_nr_new2]*weight2); ///2.0;
                data_O2t[row_nr] = (data_O2t_notrotated[row_nr_new1]*weight1 + data_O2t_notrotated[row_nr_new2]*weight2); ///2.0;
              }

              // Determine guess parameters using the "wrong" linear interpolation
              double guess_a, guess_b, guess_c, guess_d;
              find_initial_guess(&guess_a, &guess_b, &guess_c, &guess_d);

              // Do the fitting
              for(pol_eq_nr = 0; pol_eq_nr < 2; pol_eq_nr++) {

                double xstart[2];
                double dx[2];
                int fixed[2];
                double solution[2];
                int nritt;

                if(pol_eq_nr == 0) {
                  xstart[0] = guess_a;
                  xstart[1] = guess_b;
                }else {
                  xstart[0] = guess_c;
                  xstart[1] = guess_d;
                }
                dx[0] = 0.1;
                dx[1] = 0.1;
                fixed[0] = 0;
                fixed[1] = 0;

                double chi2;
                //		printf("xstart = %e %e\n", xstart[0], xstart[1]);
                fit_status[bin_nr] = doAmoeba_d(0, xstart, dx, fixed, solution, &chi2, 2, &chi2_funk, 1e-6, &nritt, application.verbose_state.verbose, 0, 0.0, NULL, NULL);
                if(fit_status[bin_nr] == 1) {
                  printerror(application.verbose_state.debug, "Error fit_asym: Downhill-Simplex method did not converge. You can try lowering the tolerance with -ftol.");
                //		  return 0;
                }else if(fit_status[bin_nr] != 0) {
                  printerror(application.verbose_state.debug, "Error fit_asym: Downhill-Simplex method failed.");
                //		  return 0;
                }

                //		printf("solution = %e %e\n", solution[0], solution[1]);
                //		printf("chi2 = %e\n", chi2);
                //		return 0;

                if(pol_eq_nr == 0) {
                  solution_a[bin_nr] = solution[0];
                  solution_b[bin_nr] = solution[1];
                  chi2_1[bin_nr] = chi2;
                }else {
                  solution_c[bin_nr] = solution[0];
                  solution_d[bin_nr] = solution[1];
                  chi2_2[bin_nr] = chi2;
                }

              } // End of pol_eq_nr loop	   
              physical[bin_nr] = is_physical(solution_a[bin_nr], solution_b[bin_nr], solution_c[bin_nr], solution_d[bin_nr]);
            }  // End of bin loop
            //	    fprintf(stderr, "XXXX %e %e %d %d %d\n", alpha, drift_grad, N_sparks, fiducial_bin, alias_order);
            for(i = 0; i < NrBins; i++) {
            fprintf(file_matrix, "%e ", solution_a[i]);
            }
            for(i = 0; i < NrBins; i++) {
              fprintf(file_matrix, "%e ", solution_b[i]);
            }
            for(i = 0; i < NrBins; i++) {
              fprintf(file_matrix, "%e ", solution_c[i]);
            }
            for(i = 0; i < NrBins; i++) {
              if(i == NrBins - 1) {
                fprintf(file_matrix, "%e\n", solution_d[i]);
              }else {
                fprintf(file_matrix, "%e ", solution_d[i]);
              }
            }

            fprintf(file_grid, "%f %f %d %d %d %d %d\n", alpha*180.0/M_PI, beta*180.0/M_PI, N_sparks, fiducial_bin, alias_order, onpulse_bin_start_shifted, onpulse_bin_end_shifted);
          
            // ======================= Write out physical file ===============================
            for(i = 0; i < NrBins; i++) {
              if(i == NrBins - 1) {
                fprintf(file_physical, "%d\n", physical[i]);
              }else {
                fprintf(file_physical, "%d ", physical[i]);
              }
            }

            // ======================= Write out chisq file ===============================
            for(i = 0; i < NrBins; i++) {
              fprintf(file_chisq, "%e ", chi2_1[i]);
            }
            for(i = 0; i < NrBins; i++) {
              fprintf(file_chisq, "%e ", chi2_2[i]);
            }
            for(i = 0; i < NrBins; i++) {
              if(i == NrBins - 1) {
                fprintf(file_chisq, "%d\n", fit_status[i]);
              }else {
                fprintf(file_chisq, "%d ", fit_status[i]);
              }
            }

            current_itteration++;
            printf("Processing: %.2lf%%    %ld/%d     %.2f %.2f %d %d  %d  \r", 100.0*(double)current_itteration/(double)(alpha_steps*drift_grad_steps*nrsparks_steps*fid_bin_steps*aliasorder_steps), current_itteration, alpha_steps*drift_grad_steps*nrsparks_steps*fid_bin_steps*aliasorder_steps, alpha*180.0/M_PI, drift_grad, N_sparks, fiducial_bin, alias_order);
            fflush(stdout);
          } // End of alias_order loop (level 5)
          fiducial_bin_index++;
        } // End of fiducial_bin loop (level 4)
      } // End of N_sparks loop (level 3)
    } // End of drift_grad loop (level 2)
  } // End of alpha loop (level 1)
  printf("\n");

  //  fprintf(stderr, "See code at line with offending_line, which shouldn't divide by 2.\n");


  fclose(file_grid);
  fclose(file_matrix);
  fclose(file_physical);
  fclose(file_chisq);

  return 0;
}
